
import json
import os

TASKS_FILE = "tasks.json"

# --- Utilitaires ---
def load_tasks():
    """Charge les t√¢ches depuis tasks.json"""
    if not os.path.exists(TASKS_FILE):
        return []
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            return json.loads(content) if content else []
    except json.JSONDecodeError:
        return []

def save_tasks(tasks):
    """Enregistre les t√¢ches dans tasks.json"""
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, indent=4, ensure_ascii=False)

def show_tasks(tasks):
    """Affiche la liste des t√¢ches"""
    if not tasks:
        print("üì≠ Aucune t√¢che pour l‚Äôinstant.")
        return
    print("\n=== Liste des t√¢ches ===")
    for t in tasks:
        status = "‚úÖ" if t["termin√©e"] else "‚ùå"
        print(f'{t["id"]}. {t["titre"]} [{status}]')
    print("=======================\n")

# --- Actions CRUD ---
def add_task(tasks):
    titre = input("Titre de la t√¢che > ").strip()
    if not titre:
        print("‚ùå Titre vide.")
        return
    task_id = max([t["id"] for t in tasks], default=0) + 1
    tasks.append({"id": task_id, "titre": titre, "termin√©e": False})
    save_tasks(tasks)
    print(f"‚úÖ T√¢che ajout√©e : {titre}")

def delete_task(tasks):
    show_tasks(tasks)
    try:
        task_id = int(input("ID de la t√¢che √† supprimer > "))
        task = next((t for t in tasks if t["id"] == task_id), None)
        if task:
            tasks.remove(task)
            save_tasks(tasks)
            print(f"üóëÔ∏è T√¢che supprim√©e : {task['titre']}")
        else:
            print("‚ùå T√¢che non trouv√©e.")
    except ValueError:
        print("‚ùå ID invalide.")

def update_task(tasks):
    show_tasks(tasks)
    try:
        task_id = int(input("ID de la t√¢che √† mettre √† jour > "))
        task = next((t for t in tasks if t["id"] == task_id), None)
        if task:
            nouveau_titre = input(f"Nouveau titre (ancien: {task['titre']}) > ").strip()
            if nouveau_titre:
                task["titre"] = nouveau_titre
                save_tasks(tasks)
                print(f"‚úèÔ∏è T√¢che mise √† jour : {nouveau_titre}")
            else:
                print("‚ùå Titre vide, rien chang√©.")
        else:
            print("‚ùå T√¢che non trouv√©e.")
    except ValueError:
        print("‚ùå ID invalide.")

def mark_done(tasks):
    show_tasks(tasks)
    try:
        task_id = int(input("ID de la t√¢che √† marquer comme termin√©e > "))
        task = next((t for t in tasks if t["id"] == task_id), None)
        if task:
            task["termin√©e"] = True
            save_tasks(tasks)
            print(f"‚úÖ T√¢che termin√©e : {task['titre']}")
        else:
            print("‚ùå T√¢che non trouv√©e.")
    except ValueError:
        print("‚ùå ID invalide.")

# --- Main loop ---
def main():
    tasks = load_tasks()
    while True:
        print("\n--- To-Do List ---")
        print("1. Ajouter une t√¢che")
        print("2. Supprimer une t√¢che")
        print("3. Mettre √† jour une t√¢che")
        print("4. Marquer comme termin√©e")
        print("5. Afficher toutes les t√¢ches")
        print("0. Quitter")
        choice = input("> ").strip()
        if choice == "1":
            add_task(tasks)
        elif choice == "2":
            delete_task(tasks)
        elif choice == "3":
            update_task(tasks)
        elif choice == "4":
            mark_done(tasks)
        elif choice == "5":
            show_tasks(tasks)
        elif choice == "0":
            print("üëã Au revoir !")
            break
        else:
            print("‚ùå Choix invalide.")

if __name__ == "__main__":
    main()
